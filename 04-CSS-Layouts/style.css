* {
  /* border-top: 10px solid #1098ad; */
  margin: 0;
  padding: 0;
  box-sizing: border-box; /*Altera o box-model padrão*/
}

/* PAGE SECTIONS */
body {
  color: #444;
  font-family: sans-serif;

  border-top: 10px solid #1098ad;
  position: relative;
}

.container {
  width: 1200px;
  /* margin-left: auto;
  margin-right: auto; */
  margin: 0 auto;
}

.main-header {
  background-color: #f7f7f7;
  /* padding: 20px;
  padding-left: 40px;
  padding-right: 40px; */
  padding: 20px 40px;
  margin-bottom: 60px;
  /* height: 80px; */
}

nav {
  font-size: 18px;
  /* text-align: center; */
}

article {
  margin-bottom: 60px;
}

.post-header {
  margin-bottom: 40px;
  /* position: relative; */
}

aside {
  background-color: #f7f7f7;
  border-top: 5px solid #1098ad;
  border-bottom: 5px solid #1098ad;
  /* padding-top: 50px;
  padding-bottom: 50px; */
  padding: 50px 40px;   /*Ao fazermos isso Aside desaparece da página(vamos corrigir)*/
  /*O que acontece é que ao adicionarmos padding left e right 40px, o comprimento do aside excede
  o limite do container pai, então, ele vai pra fora.*/

  /*Width of aside: 300px
  + 40px left + 40px right(excede total)*/

  /*Isso acontece devido ao comportamento padrão do box-model*/
  
}

/* SMALLER ELEMENTS */
h1,
h2,
h3 {
  color: #1098ad;
}

h1 {
  font-size: 26px;
  text-transform: uppercase;
  font-style: italic;
}

h2 {
  font-size: 40px;
  margin-bottom: 30px;
}

h3 {
  font-size: 30px;
  margin-bottom: 20px;
  margin-top: 40px;
}

h4 {
  font-size: 20px;
  text-transform: uppercase;
  text-align: center;
  margin-bottom: 30px;
}

p {
  font-size: 22px;
  line-height: 1.5;
  margin-bottom: 15px;
}

ul,
ol {
  margin-left: 50px;
  margin-bottom: 20px;
}

li {
  font-size: 20px;
  margin-bottom: 10px;
  /* display: inline; */
}

li:last-child {
  margin-bottom: 0;
}

/* footer p {
  font-size: 16px;
} */

/* article header p {
  font-style: italic;
} */

#author {
  font-style: italic;
  font-size: 18px;
}

#copyright {
  font-size: 16px;
}

.related-author {
  font-size: 18px;
  font-weight: bold;
}

/* ul {
  list-style: none;
} */

.related {
  list-style: none;
  margin: left 0;
}

body {
  /* background-color: orangered; */
}

/* .first-li {
  font-weight: bold;
} */

li:first-child {
  font-weight: bold;
}

li:last-child {
  font-style: italic;
}

li:nth-child(even) {
  /* color: red; */
}

/* Misconception: this won't work! */
article p:first-child {
  color: red;
}

/* Styling links */
a:link {
  color: #1098ad;
  text-decoration: none;
}

a:visited {
  /* color: #777; */
  color: #1098ad;
}

a:hover {
  color: orangered;
  font-weight: bold;
  text-decoration: underline orangered;
}

a:active {
  background-color: black;
  font-style: italic;
}
/* LVHA */

.post-img {
  width: 100%;
  height: auto;
}

nav a:link {
  /* background-color: orangered;
  margin: 20px;
  padding: 20px;

  display: block; */

  margin-right: 30px;
  margin-top: 10px;
  display: inline-block;
}

nav a:link:last-child {
  margin-right: 0;
}

button {
  font-size: 22px;
  padding: 20px;
  cursor: pointer;

  position: absolute;
  /* top: 50px;
  left: 50px; */
  bottom: 50px;
  right: 50px;
}

h1::first-letter {
  font-style: normal;
  margin-right: 5px;
}

h3 + p::first-line {
  /* color: red; */
}

h2 {
  /* background-color: orange; */
  position: relative;
}

h2::before {
  content: "TOP";
  background-color: #ffe70e;
  color: #444;
  font-size: 16px;
  font-weight: bold;
  display: inline-block;
  padding: 5px 10px;
  position: absolute;
  top: -10px;
  right: -25px;
}

/* Resolving conflicts */
/* #copyright {
  color: red;
}

.copyright {
  color: blue;
}

.text {
  color: yellow;
}

footer p {
  color: green !important;
} */

/* nav a:link,
nav p {
  font-size: 18px;
} */

/*FLOATS*/

.author-img{
  /*This image os going to be taken out of the document flow just like an
  absolutely positioned element. Now the difference here with floats
  is that all the other elements will basically float around it*/
  float: left;
   margin-bottom: 20px;
   /*A floated element is able to create margins around it*/           
}

.author{ 
  /*Na descrição do autor, devemos colocar padding o suficiente para que ela saia de trás
  da imagem. Somente comprovando o fato que a imagem está fora do fluxo normal.Porém
  se colocarmos a descrição em float, ela será posta logo quando a imagem acabar*/
   /*padding-left: 80px;    */
   margin-top: 10px;
   float: left;
   margin-left: 20px;                        

}

/*O container header que tem (h1 e nav) terá sua altura colapsada ao flutuarmos seus dois child-elements.
Pois é como se não estivessem mais na página(fix with clear)*/
/*Só continua sendo visível por conta do padding*/

/*Para limparmos o float, criar um elemento div com clear no container(BAD PRACTICE)*/ 


h1{
  float: left;
}

nav{
  float: right;
}

.clear{
  clear:both;
}

/*The clearfix hack is something that has been widely used by many years in the css community.
And the reason for that is exactly to avoid having these empty divs

We add a clearfix class to the parent element with collapsed height*/

.clearfix::after{  
  /*  - after creates a new element that is going to be the last child element of container
      - It only appears if we define something with content property
      - By default, pseudo elements like after and before are inline elements.
        However, clearing floats like this only really works on a block level element, so
        we set the display property to block*/
      clear: both;
      content: '';
      display: block;
}


article{
  width: 900px;
  float: left

  /*We divided the width of both containers the sum be equal to the total width of the parent container
  this way they can be side by side*/
  

}

aside{
  width: 300px;
  float: right;
  /*O footer vai acabar flutuando abaixo do aside, precisamos dar clear*/
}

footer{
  /*In this situation we don´t need to create any new empty div, or we don´t
  need to use the clearfix class, because we already have that element
  on which we want to clear the float, which is exactly the footer*/
  clear: both;
}

/*Nessa situação em que os dois elementos filhos ocupam, juntos, o comprimento total do container pai
não importa se usarmos float right ou float left, e a razão para isso é que não há espaço vazio entre eles.
Mas criando espaço entre eles, diminuindo o comprimento do elemento article criará um espaço entre eles, já
que um está flutuando para esquerda e o outro está flutuando para a direita. Caso eu coloque os dois 
flutuando para esquerda o aside vai colar no article. */