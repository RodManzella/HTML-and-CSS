- Layout  is the way text, image and other content is placed and arranged on a webpage

- Layout gives the page a visual structure, into which we place our content

- Building a layout: arranging page elements into a visual structure, intead of simply having them placed
one after another(normal flow)

Page Layout vs Component Layout

==============================================================================================
The 3 ways of building layouts with CSS


1) Float layouts

- The old way of building layouts of all sizes, using the float CSS property.
Still used but getting outdated fast.


2) Flexbox

- Modern way of laying out elements in a 1-dimensional row without using floats.
Perfect for component layouts

3) CSS grid

- For laying out element ina fully-fledged 2-dimensional grid. Perfect for page layouts and complex components

===================================================================================================
Absolute Positioning VS floats

Absolute Positioning:

-Element is removed from the normal flow

-No impact on surrounding, might overlap them

- We use top, bottom, left or right to offset the element
from its relatively positioned container

-----------------------------------------------------------------------

Floats:

- Element is removed from the normal flow

- Text and Inline elements will wrap around the floated element

-The container element will not adjust its height to the floated element.
Container element collapses height

=========================================================================================

Box-sizing: border-Box:

------------------------------------------------------------------------------------------
recap default box-model behaviour:


Final element width: right border + right padding + width + left padding + left border

Final element height: top border + top padding + height + bottom padding + bottom border

- Whenever we specify a height or a width, then, the box model will add the border and the paddingg
on top of that, and that is exactly what created this situation that we found ourselves in now on
our page. The sidebar grew too big because of the padding  and so it no longer fit close to the
article

- Woudn´t it be nice ifwe simply defined a certain height or a certain width and then the element would
simply be exactly that size no matter what border or padding

- We can do that by adding a little property to the element(box-sizing: border-box)


box-sizing: border-box: Now the specified width and height goes all the way from one side of the border to the
oposite side of the border, including the content area and the padding

Final element width: width

Final element height: height

- What this also means is that padding and borders that we specify will now reduce the inner width of the
content area(the content area adapts to be the final size we defined initially)

- Esse comportamento da border-box é bem mais intuitivo e menos confuso, por isso, vamos aplicar ele sempre
em todos elementos utilizando o seletor universal.

====================================================================================================================
A FLEXBOX OVERVIEW:

- Flexbox is a set of related CSS properties for building 1-dimensional layouts

- The main idea behind flexbox is that empty space inside a container element can be automatically divided
by its child elements 

- Flexbox makes it easy to automatically align items to one another inside a parent container, both horizontally
and vertically

- Flexbox solves common problems such as vertical centering and creating equal-height columns

- Flexbox is perfect for replacing floats, allowing us to write fewer and cleaner HTML and CSS code

------------------------------------------------------------------------------------------------------
FLEXBOX TERMINOLOGY:

- The element in which we want to use Flexbox is called the Flex Container

- All we have to do in order to create a flex container is to set its display property to flex(display:flex)

- If we do this, then all the direct children of that flex container will ebcome the so called flex items

- We will use different properties on the flex container and on the flex items

- The direction in which these flex items are laid out is called the main axis(horizontal)

- cross axis(vertical)

FLEX CONTAINER:

1) gap: 0 | <length>

- To create space between items, without , usign margin


2) justify-content: flex-start | flex-end | center | space-between| space-around | space-evenly

- To align items along main axis(horizontally, by default)


3) align-items: stretch | flex-start | flex-end | center | baseline

- To align items along cross axis (vertically by default)


4) flex-direction: row | row-reverse | column | column-reverse

- To define which is the main axis


5) flex-wrap: nowrap | wrap | wrap-reverse

- To allow items to wrap into a new line if they are too large


6) align-content: stretch | flex-start | flex-end | center | space-between | space-around

- Only applies when there are multiple lines (flex-wrap: wrap)






