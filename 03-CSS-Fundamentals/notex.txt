CSS Theory #1: Conflicts Between Selectors

What happens when there are multiple CSS rules that apply to the same elements

-There are multiple selectors selecting the same element. which one of them applies

- All of them. All rules and properties are applied

- But there are conflicting font-size declarations! is it 18px, 20px, or 22px

-When the are multiple the samedeclarations for the exact same element, then what matters are the selectors
            5)Declarations marked !important

            4)Inline style(style atrribute in HTML)

            3) ID(#)selector     multiple   -------------->  Last selector in code applies
                
            2) Class(.) or pseudo-class(:) selector     multiple   -------------->  Last selector in code applies

            1)Element Selector(p, div, li, etc.)    multiple   -------------->  Last selector in code applies

            0) Universal selector(*)
          



.author{
    font-style: italic;
    font-size: 18px;
}


#author-text{
    font-size: 20px;
}

p,
li{
    font-family: sans-serif;
    color: #444444;
    font-size: 22px;
}


-There is an ID selector(#author-text), so for the conflicting font-size property, this is the selector that applies

===========================================================================================================================

CSS Theory #2: Inheritance and the Universal Selector

-Inheritance is a mechanism by which some styles get their values inherited from parent elements to child elements

- Not all properties get inherited, it is mostly the ones about text

- Inherited styles are easily overwriten whenever there is any rule that applies for the same property

- inherited values are the ones that have the lowest priority

- We use the strategy of putting text properties in the body selector, and then we can overwrite the way we want



HOW INHERITANCE WORKS:

    <body>                                                          
        <nav>
            This is the navigation
        </nav>

        <h1> My website </h1>

        <p>
            The text in this paragraph
            is completely irrelevant
        </p>

    </body>


body{
    color: #444;
    font-family: sans-serif;
    font-size: 16px;

    border-top: 10px solid #1098ad;            The border property does not get inherited(impractical)
}


elements nav, h1 and p inherit color, font-family and font-size properties

-Not all properties get inherited. It´s mostly ones related to text: font-family, font-size, font-weightt, font-style,
color, line-height, letter-spacing, text-align, text-transform, text-shadow, list-style, etc.


-Now what happens if i add a new rule to the h1 element:

h1{
    color: #1098ad;
    font-size: 32px;
    text-transform: uppercase;
}

- now the color and font-size properties overwrite the inherited styles from the parent element(text-transform is added)

===========================================================================================================================
CSS Theory #3 The box model:

-The box model defines how elements are displayed on  a webpage and how they are sized

- In this box model each and every element on a webpage can be seen as a rectangular box, and each of these boxes can have
content, a border, space inside and outside of it

Content: width and height (inside of an element)

Border: A line around the element, still inside of the element

padding: Invisible space around the content, inside of the element(space between content and border)

margin: space outside of the element, between elements

Fill area: Area that gets filled with background clor or background image(everything inside border)



Final element width = left border + left padding + width + right padding + right border

Final element height = top border + top padding + height + bottom padding + bottom border

. we can specify all these values using CSS properties
. This is the default behavior, but we can change it


- Collapsing margins: when we have two margins occuping the same space, only the larger is visible to the page.

====================================================================================================================

CSS Theory #4 Types of Boxes: 

. Block-Level elements:

- Elements are formatted visually as blocks

- Elements occupy 100% of parent element´s width, no matter the content

- Elements are stacked vertically by default, one after another

- the box-model applies as showed earlier

Default elements: body, main, header, footer, section, nav, aside, div, h1-h6, p, ul, ol, li, etc.

With CSS: display: block

-----------------------------------------------------------------------------------------------------------------------

.Inline elements:

- Occupies only the space necessary for its content

- Causes no line-breaks after or before the element

- Box model applies in a different way: heights and widths do not apply

- Paddings and margins are applied only horizontally(left and right)

Default elements: a, img, strong, em, button, etc.

With CSS: display:inline


---------------------------------------------------------------------------------------------------------------------------

.Inline-Block elements:

-Looks like inline from the outside , behaves like block-level on the inside 

- Occupies only content´s space

- Causes no line-breaks

- Box-model applies as showed: 

. box model behaves like block level boxes: we can still set heights and width, and we can still use margins an paddings like
block-level elements

display: inline-block





